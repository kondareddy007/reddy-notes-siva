# reddy-vpc_test

### AWS VPC Module

* Code available locally below command we have to use.
#source = "../reddy-terraform-aws-vpc"
* Code is available in git we have to use below command. it will download the module code and run the "reddy-vpc-test" terraform.
#source = "git::https://github.com/kondareddy007/reddy-terraform-aws-vpc.git?ref=master"

This module creates following resources. We are using HA, we are getting first 2 AZ automatically.
* VPC
* Internet Gateway with VPC association
* 2 Public subnets in 1a and 1b
* 2 Private subnets in 1a and 1b
* 2 Database subnets in 1a and 1b
* Elastic IP
* NAT gateway in 1a public subnet
* Public Route Table
* Private Route Table
* Database Route Table
* Subnets and Route table associations
* VPC peering if user requests
* Adding the peering route in default VPC, if user don't provide acceptor VPC explicitly.
* Adding the peering routes in public, private and database route tables

### Inputs
* project_name (Required) - your project name
* environment (Required) - which environment you are working in
* vpc_cidr (Optional) - Default value is 10.0.0.0/16, user can override
* enable_dns_hostnames (Optional) - Default value is true
* common_tags (Optional) - Better to provide
* vpc_tags (Optional) - Default value is empty. type is map
* igw_tags (Optional) - Default value is empty. type is map
* public_subnets_cidr (Required) - User must provide 2 valid public subnets CIDR
* public_subnets_tags (Optional) - Default value is empty. type is map
* private_subnets_cidr (Required) - User must provide 2 valid private subnets CIDR
* private_subnets_tags (Optional) - Default value is empty. type is map
* database_subnets_cidr (Required) - User must provide 2 valid database subnets CIDR
* database_subnets_tags (Optional) - Default value is empty. type is map
* nat_gateway_tags (Optional) - Default value is empty. type is map
* public_route_table_tags (Optional) - Default value is empty. type is map
* private_route_table_tags (Optional) - Default value is empty. type is map
* database_route_table_tags (Optional) - Default value is empty. type is map
* is_peering_required (Optional) - default value is false
* acceptor_vpc_id (Optional) - default value is default VPC ID
* vpc_peering_tags (Optional) - Default value is empty. type is map

### Outputs
* vpc_id -  VPC ID created
* public_subnet_ids - 2 public subnet ID created
* private_subnet_ids - 2 private subnet ID created
* database_subnet_ids - 2 database subnet ID created


Main functions:
---------------
Slice():-
--------
syntax:-
* slice(list, start_index, end_index)
* list: The list from which elements will be selected.
* start_index: The index at which the slice begins (inclusive).
* end_index: The index at which the slice ends (exclusive).

example: azs_names = slice(data.aws_availability_zones.azs.names, 0,2)
Now it will display only two (0,1) amazon zones from availability zones.
"us-east-1a",
"us-east-1b"

Merge():-
--------
syntax:-
merge(map1, map2, ..., mapN)
* Combining variables: You might need to merge multiple variable maps to configure a resource.
* Overriding defaults: If you want to provide a default configuration that can be overridden by user inputs.
Example:
 tags = merge(
    var.common_tgs, 
    var.vpc_tags,
    {
        Name = local.name
    }
    )
Lenght():-
-----------
syntax:
length(value)
* value: This can be a list, map, or string. Terraform will return the length of the value depending on its type:
* For lists: the number of elements in the list.
* For maps: the number of key-value pairs.
* For strings: the number of characters.

Example:
count = length(var.public_subnet_cidr)

Element():-
----------
syntax:
element(list, index)
* list: The list from which you want to retrieve an element.
* index: The position of the item to retrieve. If the index is larger than the number of elements in the list, Terraform will cycle through the list by applying a modulus operation (index % length(list)).
* Note: The element() function is particularly useful in scenarios where you want to cycle through values in a list, such as distributing instance types or availability zones in a round-robin fashion.
Example:
subnet_id = element(aws_subnet.private[*].id, count.index)
